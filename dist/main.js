(()=>{"use strict";var e,t,n,a,o={138:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var a=n(100),o=n(417),c=n(380),i=n(629),r=n(106),s=e([o]);o=(s.then?(await s)():s)[0];const m=document.querySelector(".popup"),d=document.getElementById("cards-container"),p=document.getElementById("counter-cards"),l=await(0,a.Z)([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);d.addEventListener("click",(async e=>{if(e.target.classList.contains("comments-button")){const{id:t}=e.target.parentElement.parentElement,n=await(0,a.Z)(t);(0,c.Z)(n,m)}else if(e.target.classList.contains("like-button")){const{id:t}=e.target.parentElement.parentElement.parentElement.parentElement;await(0,i.m)(t);const n=await(0,i.n)(),a=(e,t)=>e.item_id===t,o=n.find((e=>a(e,t)))??0;e.target.nextSibling.textContent=`${o.likes??0} Likes`}})),l.forEach((e=>{const t=(0,o.Z)(e);d.appendChild(t)}));const u=(0,r.Z)(d);p.textContent=`Characters (${u})`,t()}catch(e){t(e)}}),1)},100:(e,t,n)=>{n.d(t,{Z:()=>a});const a=async e=>{const t=await fetch(`https://rickandmortyapi.com/api/character/${e}`);return await t.json()}},380:(e,t,n)=>{n.d(t,{Z:()=>c});const a=n.p+"assets/icons8-x-50 (1).png",o=e=>{let t=0;return e&&(t=e.childElementCount),t},c=(e,t)=>{t.innerHTML=`\n    <div class="popup-ele">\n        <div class="button-div">\n            <button alt="quit button" id="quit" class="quit-button"><img src="${a}"></button>\n        </div>\n        <div class="popup-description">\n            <img src="${e.image}">\n            <h1>${e.name}</h1>\n            <div class="popup-description-elements">\n                <p>Status: ${e.status}</p>\n                <p>Species: ${e.species}</p>\n                <p>Gender: ${e.gender}</p>\n                <p>Origin: ${e.origin.name}</p>\n                <p>Location: ${e.location.name}</p>\n            </div>\n            <div class="comments-section">\n                <h2 class="heading-comment">Comments</h2>\n                <ul class="comments-elements">\n                </ul>\n            </div>\n        </div>\n        <div class="popup-form-section">\n            <h2>Add a Comment</h2>\n            <form id="comment-form">\n                <input type="text" id="username" name="username" placeholder="Your Name" required> <br>\n                <textarea id="text-area" placeholder="Your insights" maxlength="300" name="message" required></textarea> <br>\n                <button type="submit" class="button-comment">Comments</button>\n            </form>\n        </div>\n    </div>\n    `,document.querySelector("#quit").addEventListener("click",(()=>{t.innerHTML=""}));const n=document.getElementById("comment-form"),c=document.getElementById("username"),i=document.getElementById("text-area"),r=document.querySelector(".comments-elements"),s=document.querySelector(".heading-comment");s.textContent=`Comment(${o(r)})`;const m=async()=>{const t=await(async e=>{try{const t=await fetch(`https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/xqHl95viv3D6FREdQd3p/comments?item_id=${e}`),n=await t.json();if(t.ok)return n}catch(e){console.log(e.message)}return 0})(e.id);r.innerHTML="",0!==t?t.forEach((e=>{r.innerHTML+=`\n          <li class="individual-comment"><p>${e.creation_date} ${e.username}: ${e.comment}</p></li>\n      `})):r.innerHTML="No Comments Yet",s.textContent=`Comment(${o(r)})`};m(),n.addEventListener("submit",(async t=>{t.preventDefault();const n=c.value,a=i.value;await(async(e,t,n)=>{try{await fetch("https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/xqHl95viv3D6FREdQd3p/comments",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({item_id:e,username:t,comment:n})})}catch(e){console.log(e.message)}})(e.id,n,a),m(),c.value="",i.value=""}))}},106:(e,t,n)=>{n.d(t,{Z:()=>a});const a=e=>e?e.childElementCount:0},417:(e,t,n)=>{n.a(e,(async(e,a)=>{try{n.d(t,{Z:()=>c});var o=n(629);const e=await(0,o.n)(),c=t=>{const n=document.createElement("div");n.className="card",n.id=t.id;const a=document.createElement("img");a.className="card-image",a.src=t.image,a.alt=t.name,n.appendChild(a);const o=document.createElement("div");o.className="container";const c=document.createElement("div");c.className="containerCardTitleLikeBtn";const i=document.createElement("h4");i.textContent=t.name,c.appendChild(i);const r=document.createElement("div");r.className="containerLikes";const s=document.createElement("button");s.classList.add("like-button");const m=document.createElement("div");m.classList.add("like-img"),s.appendChild(m),r.appendChild(s);const d=e.find((e=>{return t=e,a=n.id,t.item_id===a;var t,a}))??0,p=document.createElement("p");p.textContent=`${d.likes??0} Likes`,r.appendChild(p),c.appendChild(r),o.appendChild(c);const l=document.createElement("button");l.classList.add("comments-button"),l.textContent="Comments",o.appendChild(l);const u=document.createElement("button");return u.classList.add("reservations-button"),u.textContent="Reservations",o.appendChild(u),n.appendChild(o),n};a()}catch(e){a(e)}}),1)},629:(e,t,n)=>{n.d(t,{m:()=>a,n:()=>o});const a=async e=>{const t=JSON.stringify({item_id:e}),n=await fetch("https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/xqHl95viv3D6FREdQd3p/likes/",{method:"POST",body:t,headers:{"Content-Type":"application/json"}});return await n.text()},o=async()=>{const e=await fetch("https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/xqHl95viv3D6FREdQd3p/likes");return await e.json()}}},c={};function i(e){var t=c[e];if(void 0!==t)return t.exports;var n=c[e]={exports:{}};return o[e](n,n.exports,i),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",a=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},i.a=(o,c,i)=>{var r;i&&((r=[]).d=1);var s,m,d,p=new Set,l=o.exports,u=new Promise(((e,t)=>{d=t,m=e}));u[t]=l,u[e]=e=>(r&&e(r),p.forEach(e),u.catch((e=>{}))),o.exports=u,c((o=>{var c;s=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var c=[];c.d=0,o.then((e=>{i[t]=e,a(c)}),(e=>{i[n]=e,a(c)}));var i={};return i[e]=e=>e(c),i}}var r={};return r[e]=e=>{},r[t]=o,r})))(o);var i=()=>s.map((e=>{if(e[n])throw e[n];return e[t]})),m=new Promise((t=>{(c=()=>t(i)).r=0;var n=e=>e!==r&&!p.has(e)&&(p.add(e),e&&!e.d&&(c.r++,e.push(c)));s.map((t=>t[e](n)))}));return c.r?m:i()}),(e=>(e?d(u[n]=e):m(l),a(r)))),r&&(r.d=0)},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var a=n.length-1;a>-1&&!e;)e=n[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,